## edp-install configuration
## Ref: https://github.com/epam/edp-install
##
##

global:
  # -- EDP version
  version: "3.8.0-SNAPSHOT"
   # -- platform type that can be "kubernetes" or "openshift"
  platform: "kubernetes"
  # -- a cluster DNS wildcard name
  dnsWildCard:
  # -- Can be gerrit, github or gitlab. Default: github
  gitProvider: github
  # Define the Image Registry that will be used in Pipelines.
  # This section is optional, and users can configure the registry within the EDP Portal user interface.
  #
  # Platform supports several types of registries, such as 'ecr', 'harbor', 'dockerhub' and 'openshift'.
  # 'openshift' registry is available only in case if platform is deployed on the OpenShift cluster and the variable global.platform is set to 'openshift'
  #
  # Below is an example of endpoint values for each registry type:
  # type:      | url
  # =============================
  # ecr        | <aws_account_id>.dkr.ecr.<aws_region>.amazonaws.com
  # harbor     | <registry.example.com>
  # dockerhub  | 'docker.io'
  # openshift  | <image-registry.openshift-image-registry.svc:5000>
  #
  # For example to integrate platform with dockerhub and publish image under 'my_user' account:
  # dockerRegistry:
  #   type: "dockerhub"
  #   url: "docker.io"
  #   space: "my_user"
  # As a result all image artifacts are published under https://hub.docker.com/repository/docker/my_user
  # dockerRegistry:
  #   type: ""
  #   url: ""
  #   space: ""

# -- AWS Region name, e.g. "eu-central-1".
# Mandatory if global.dockerRegistry.type=ecr for kaniko build-task. https://github.com/epam/edp-tekton/blob/release/0.9/charts/pipelines-library/templates/tasks/kaniko.yaml#L73
# awsRegion: ""

# Configure External Secrets Operator to provision secrets for Platform and/or EDP
# https://external-secrets.io/latest/provider-aws-secrets-manager/
externalSecrets:
  # -- Configure External Secrets for EDP platform. Deploy SecretStore. Default: false
  enabled: false
  secretProvider:
    aws:
      # -- Use AWS as a Secret Provider. Can be ParameterStore or SecretsManager
      service: ParameterStore
      # -- IAM Role to be used for Accessing AWS either Parameter Store or Secret Manager. Format: arn:aws:iam::<AWS_ACCOUNT_ID>:role/<AWS_IAM_ROLE_NAME>
      role:
      # -- AWS Region where secrets are stored, e.g. eu-central-1
      region: eu-central-1

  # When installing EDP, three secrets must be created: ci-argocd, ci-defectdojo, ci-dependency-track, kaniko-docker-config and other.
  # see https://github.com/epam/edp-install/tree/master/deploy-templates/templates/external-secrets, https://epam.github.io/edp-install/operator-guide/external-secrets-operator-integration
  # manageEDPInstallSecrets creates required secrets using ExternalSecretOperator
  # Ensure external secret source is configured properly
  # -- Create necessary secrets for EDP installation, using External Secret Operator
  manageEDPInstallSecrets: true
  # -- Value name in AWS ParameterStore or AWS SecretsManager. Used when manageEDPInstallSecrets is true
  manageEDPInstallSecretsName: /edp/deploy-secrets

annotations: {}

codebase-operator:
  enabled: true
  # image:
  #   repository: epamedp/codebase-operator
  #   tag:
  # envs:
  #   - name: RECONCILATION_PERIOD
  #     value: "360"  # The value should be typed in minutes
  #   # Maximum number of parallel reconciliation codebasebranches
  #   - name: CODEBASE_BRANCH_MAX_CONCURRENT_RECONCILES
  #     value: 3
  # jira:
  #   integration: false
  #   name: "jira"
  #   apiUrl: "https://jiraeu-api.example.com"
  #   rootUrl: "https://jiraeu.example.com"
  #   credentialName: "ci-jira"

cd-pipeline-operator:
  enabled: true
  # image:
  #   repository: epamedp/cd-pipeline-operator
  #   tag:
  # -- Defines the type of the tenant engine that can be "none", "kiosk" or "capsule";
  # for Stages with external cluster tenancyEngine will be ignored. Default: none
  tenancyEngine: "none"
  # -- Required tenancyEngine: capsule. Specify Capsule Tenant specification for Environments.
  capsuleTenant:
    # Enable Capsule Tenant creation as a part of cd-pipeline-operator deployment. Active if tenancyEngine="capsule"
    create: true
    spec:
    #   ingressOptions:
    #     allowWildcardHostnames: false
    #     allowedHostnames:
    #       # Enable restriction pattern for ingress hostname creation.
    #       allowedRegex: ^.*example.com$
    #     hostnameCollisionScope: Tenant
    #   limitRanges:
    #     items:
    #       - limits:
    #            # Default limits for cintainer if not specified in upstream manifest
    #           - default:
    #               cpu: 256m
    #               memory: 512Mi
    #             # Default requests for cintainer if not specified in upstream manifest
    #             defaultRequest:
    #               cpu: 128m
    #               memory: 128Mi
    #             type: Container
    #         # Manage PVC creation
    #       - limits:
    #           - max:
    #               storage: 0Gi
    #             min:
    #               storage: 0Gi
    #             type: PersistentVolumeClaim
    #   # Maximum count of namespace to be created by cd-pipeline-operator
    #   namespaceOptions:
    #     quota: 3
    #   networkPolicies:
    #     items:
    #       - ingress:
    #           - from:
    #               - namespaceSelector:
    #                   matchLabels:
    #                     # Please fill namespace for match selector
    #                     capsule.clastix.io/tenant: <namespace>
    #               - podSelector: {}
    #               - ipBlock:
    #                   cidr: 172.16.0.0/16
    #         podSelector: {}
    #         policyTypes:
    #           - Ingress
    #   resourceQuotas:
    #     items:
    #       - hard:
    #           limits.cpu: 512m
    #           limits.memory: 512Mi
    #       - hard:
    #           # Maximum count of pods to be deployed
    #           pods: '5'
    #     scope: Tenant
    #   serviceOptions:
    #     allowedServices:
    #       # Restrict 'externalName', 'LoadBalancer' and 'NodePort' service type creation
    #       externalName: false
    #       loadBalancer: false
    #       nodePort: false
    # -- should the operator manage(create/delete) namespaces for stages
    manageNamespace: true

    # -- flag that indicates whether the operator should manage secrets for stages;
    # values: own/eso/none.
    # own - just copy secrets;
    # eso - secrete will be managed by External Secrets Operator(operator should be installed in the cluster);
    # none - not enable secrets management logic;
    secretManager: none

gerrit-operator:
  enabled: false
  # image:
  #   repository: epamedp/gerrit-operator
  #   tag:
  # gerrit:
  #   deploy: true
  #   name: "gerrit"
  #   image: "openfrontier/gerrit"
  #   version:
  #   imagePullSecrets:
  #   storage:
  #     size: 1Gi
  #     class: gp2

edp-headlamp:
  enabled: true
  config:
    # -- base url path at which headlamp should run
    baseURL: ""
    oidc:
      # Enable OIDC integration. Default: false
      enabled: false
      # -- Keycloak URL
      keycloakUrl: "https://keycloak.example.com"
      # -- OIDC client ID
      clientID: ""
      # -- OIDC client secret name
      clientSecretName: "keycloak-client-headlamp-secret"
      # -- OIDC client secret key
      clientSecretKey: "clientSecret"
      # -- OIDC issuer realm
      issuerRealm: ""
      # -- OIDC scopes to be used
      scopes: ""
  # image:
  #   repository: epamedp/edp-headlamp
  #   tag:

edp-tekton:
  enabled: true

  tekton-cache:
    # Deploy tekton-cache helm-chart.
    enabled: true
    # Tekton cache endpoint for pipeline-library helm chart. See charts/pipelines-library/templates/resources/cm-tekton-cache.yaml
    # url: http://tekton-cache:8080

  dashboard:
    # -- Deploy Tekton Dashboard as a part of pipeline library when true. Default: true
    # -- WARNING: Default deployment of the dashboard does not involve any proxy and may be accessible to the public.
    # -- To enable proxy protect use openshift_proxy or oauth2_proxy sections.
    # -- More details:
    # -- https://epam.github.io/edp-install/operator-guide/oauth2-proxy/
    enabled: true

    # -- Define mode for Tekton Dashboard. Enable/disaable capability to create/modify/remove Tekton objects via Tekton Dashboard. Default: false.
    readOnly: false

    # -- Make it possible to use openshift as OIDC provider to hide tekton-dashboard.
    # -- Only for openshift deploy scenario,
    # -- For EKS scenario - uncomment dashboard.ingress.annotations block and
    # -- set the value of the oauth2_proxy.enable to true
    # -- More details:
    # -- https://epam.github.io/edp-install/operator-guide/oauth2-proxy/?h=#enable-oauth2-proxy-on-tekton-dashboard
    openshift_proxy:
      # -- Enable oauth-proxy to include authorization layer on tekton-dashboard. Default: flase
      enabled: false

    ingress:
      # -- Annotations for Ingress resource
      annotations: {}
        # -- Uncomment it to enable tekton-dashboard OIDC on EKS cluster
        # nginx.ingress.kubernetes.io/auth-signin: 'https://<oauth-ingress-host>/oauth2/start?rd=https://$host$request_uri'
        # nginx.ingress.kubernetes.io/auth-url: 'http://oauth2-proxy.edp.svc.cluster.local:8080/oauth2/auth'

# SSO (OAuth2-proxy) configuration section
# OAuth2-proxy requires Keycloak and Keycloak-operator are properly configured before deployment.
# Ref:
# - https://epam.github.io/edp-install/operator-guide/install-keycloak/
# - https://github.com/epam/edp-cluster-add-ons
# - https://github.com/epam/edp-keycloak-operator
sso:
  # -- Install OAuth2-proxy and Keycloak CRs as a part of EDP deployment.
  enabled: true
  # -- Keycloak URL.
  keycloakUrl: https://keycloak.example.com
  # -- Administrators of your tenant.
  admins:
    - "stub_user_one@example.com"
  # -- Developers of your tenant
  developers:
    - "stub_user_one@example.com"
    - "stub_user_two@example.com"

  # Oauth2-proxy image
  image:
    # -- OAuth2-proxy image repository
    repository: quay.io/oauth2-proxy/oauth2-proxy
    # -- OAuth2-proxy image tag
    tag: v7.4.0

  # Create a cookie-secret with the following command:
  # 'openssl rand -base64 32 | head -c 32 | base64'
  # Use an existing secret for OAuth2 cookie-secret
  existingSecret:
    # -- Secret name which stores cookie-secret
    secretName: oauth2-proxy-cookie-secret
    # -- Secret key which stores cookie-secret
    secretKey: cookie-secret

  # -- Additional container environment variables
  extraEnv: []
  # -- Extra arguments to provide to the OAuth2-proxy
  extraArgs: {}

  # -- Additional volumes to be added to the OAuth2-proxy pod
  extraVolumes: []
  #  - name: custom-ca
  #    secret:
  #      defaultMode: 420
  #      secretName: custom-ca

  # -- Additional volumeMounts to be added to the OAuth2-proxy container
  extraVolumeMounts: []
  #  - name: custom-ca
  #    mountPath: /etc/ssl/certs/CA.crt
  #    readOnly: true
  #    subPath: CA.crt

  ingress:
    # -- Additional ingress annotations
    annotations: {}
    # -- Ingress path type. One of `Exact`, `Prefix` or `ImplementationSpecific`
    pathType: Prefix

    # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
    # Ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
    # -- Defines which ingress controller will implement the resource, e.g. nginx
    ingressClassName: ""
    # -- Ingress TLS configuration
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

# define platform Quick Links, more details: https://github.com/epam/edp-component-operator/
# quickLinks:
#   argocd: ""
#   defectdojo: ""
#   dependency_track: ""
#   docker_registry: ""
#   grafana: ""
#   kibana: ""
#   nexus: ""
#   sonar: ""

# define extra Quick Links, more details: https://github.com/epam/edp-component-operator/
extraQuickLinks: {}
  # - prometheus:
  #     url: https://ingress-prometheus.example.com
  #     visible: true
  #     icon: icon_in_base64
  # - another_tool:
  #     url: https://ingress-anothertool.example.com
  #     visible: true
  #     icon: icon_in_base64

# -- Array of extra K8s manifests to deploy
extraObjects: []
  # - apiVersion: external-secrets.io/v1beta1
  #   kind: ExternalSecret
  #   metadata:
  #     name: example-secret-1
  #   spec:
  #     data:
  #       - remoteRef:
  #           key: /edp/deploy-secrets
  #           property: example-secret-1.username
  #         secretKey: username
  #       - remoteRef:
  #           key: /edp/deploy-secrets
  #           property: example-secret-1.password
  #         secretKey: password
  #     secretStoreRef:
  #       kind: SecretStore
  #       name: example-parameterstore
  # - |
  #       apiVersion: external-secrets.io/v1beta1
  #       kind: ExternalSecret
  #       metadata:
  #         name: example-secret-2
  #       spec:
  #         data:
  #           - remoteRef:
  #               key: /edp/deploy-secrets
  #               property: example-secret-2.username
  #             secretKey: username
  #           - remoteRef:
  #               key: /edp/deploy-secrets
  #               property: example-secret-2.password
  #             secretKey: password
  #         secretStoreRef:
  #           kind: SecretStore
  #           name: example-parameterstore
